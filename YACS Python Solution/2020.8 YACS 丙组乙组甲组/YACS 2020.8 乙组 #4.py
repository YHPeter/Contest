# YACS 2020.8 乙组 #4

'''
输入：
6 2 4 5 1
输出: 3

输入：
5 1 1 1 1
输出: 5

输入：
13 2 1 1 1
输出: 16

输入：
910 1 2 3 4
输出: 652819942591899754341335040

900 1 2 3 4
输出: 348170636049013202315378688

输入：
999 1 1 1 3
输出: 78551672112789411833022577315290546060373041

输入：
998 1 1 1 2
输出: 3213876088517980551083924184682325205044405987565585670602752

输入：
1000 4 3 2 1
输出: 29412782364201869744258916193947682977082042816774114713884306668781568

输入：
997 2 2 1 1
输出: 1128474576789396007649987075733355850705918934501204020648401638027280569076538085937500

输入：
1000 1 1 1 1
输出: 34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184

910 1 2 3 4
900 1 2 3 4
998 1 1 1 2
999 1 1 1 3
1000 4 3 2 1
1000 1 1 1 1

'''

s = input().split()
n = int(s[0])
a = int(s[1])
b = int(s[2])
c = int(s[3])
d = int(s[4])
dp = []
for i in range(n+1):
    dp.append([0, 0, 0, 0])
    if i >= a:
        dp[i][1] = dp[i-a][0]+1
    if (i >= b + c):
        dp[i][2] = dp[i - (b + c)][0]
    if (i >= d):
        for j in range(1, int(i/d)):
            dp[i][3] = max(dp[i][3], dp[i - j*d][2]*j)
    dp[i][0] = max(dp[i][1], dp[i][2], dp[i][3])
print(dp[n][0])