# YACS 2020.8 乙组 #4

'''
输入：
6 2 4 5 1
输出: 3

输入：
5 1 1 1 1
输出: 5

输入：
13 2 1 1 1
输出: 16

输入：
910 1 2 3 4
输出: 652819942591899754341335040

900 1 2 3 4
输出: 348170636049013202315378688

输入：
999 1 1 1 3
输出: 78551672112789411833022577315290546060373041

输入：
998 1 1 1 2
输出: 3213876088517980551083924184682325205044405987565585670602752

输入：
1000 4 3 2 1
输出: 29412782364201869744258916193947682977082042816774114713884306668781568

输入：
997 2 2 1 1
输出: 1128474576789396007649987075733355850705918934501204020648401638027280569076538085937500

输入：
1000 1 1 1 1
输出: 34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184
'''

n,a,b,c,d = map(int,input().split())
dp = [0]*(n+1)
for i in range(n+1):
    if i+a<=n: dp[i+a] = max(dp[i+a],dp[i]+1)
    j = 0
    while i + j * d + b + c <= n:
        dp[i + j * d + b + c] = max(dp[i + j * d + b + c], dp[i]*j)
        j+=1
print(dp[-1])