# YACS 2020.8 乙组 #4

'''
输入：
6 2 4 5 1
输出: 3

输入：
5 1 1 1 1
输出: 5

输入：
10 2 1 1 1
输出: 8

输入：
910 1 2 3 4
输出: 652819942591899754341335040

900 1 2 3 4
输出: 348170636049013202315378688

输入：
999 1 1 1 3
输出: 78551672112789411833022577315290546060373041

输入：
998 1 1 1 2
输出: 3213876088517980551083924184682325205044405987565585670602752

输入：
1000 4 3 2 1
输出: 29412782364201869744258916193947682977082042816774114713884306668781568

输入：
997 2 2 1 1
输出: 1128474576789396007649987075733355850705918934501204020648401638027280569076538085937500

输入：
1000 1 1 1 1
输出: 34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184

910 1 2 3 4
900 1 2 3 4
999 1 1 1 3
998 1 1 1 2
1000 4 3 2 1

'''
def stdinput():
    '''simple input function'''
    def strint(x):
        try: return int(x)
        except: return x
    return list(map(strint,input().strip().split()))
def solution():
    n,a,b,c,d = stdinput()


    dp = [[0]*(4) for _ in range(n)]

    for i in range(a,n):
        dp[i][0] = max(dp[i-a][0],dp[i-a][1],dp[i-a][2],dp[i-a][3])+1
        dp[i][1] = dp[i-b][0]
        dp[i][2] = dp[i-c][1]
        dp[i][3] = dp[i-d][2]*2
    # print(dp)
    print(dp[-1][0]+1)

for i in range(5):
    solution()